name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Log in to Amazon ECR
    - name: Log in to Amazon ECR
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    # Build the Docker image
    - name: Build Docker image
      run: docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/fantasybballstats:latest .

    # Push the Docker image to Amazon ECR
    - name: Push Docker image to ECR
      run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/fantasybballstats:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # SSH to EC2 instance and pull the new image from ECR
    - name: SSH and Deploy to EC2
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PEM_KEY }}
        script: |
          set -euo pipefail
          REG=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          REPO="$REG/fantasybballstats"
          IMG="$REPO:latest"
        
          # ECR login
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin "$REG"
        
          # Stop & remove the running container
          docker rm -f fantasy_scraper_container || true
        
          # Remove ALL local images for this repo to free disk (safe since the container is gone)
          docker images --filter="reference=$REPO:*" -q | xargs -r docker rmi -f || true
        
          # General prune to sweep any other cruft
          docker system prune -af --volumes || true
        
          # Pull fresh
          docker pull "$IMG"
        
          # Run with capped logs so they don't fill disk
          docker run -d --name fantasy_scraper_container -p 5000:5000 \
            --log-opt max-size=10m --log-opt max-file=3 \
            -e FLASK_ENV=production \
            -e S3_BUCKET=fantasy-stats-dev \
            -e S3_PREFIX=dev/players/ \
            -e AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }} \
            "$IMG"

  # restart nginx to update website
  sudo systemctl restart nginx
